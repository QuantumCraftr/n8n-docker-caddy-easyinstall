#!/bin/bash
# üîÑ Script de mise √† jour n8n-docker-caddy

set -e

# Couleurs
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

# Chemin vers le r√©pertoire parent (racine du projet)
PROJECT_ROOT=".."

echo -e "${BLUE}üîÑ Mise √† jour n8n-docker-caddy${NC}"
echo ""

# Fonction pour afficher les versions actuelles
show_current_versions() {
    echo -e "${YELLOW}üìã Versions actuelles:${NC}"
    
    # n8n
    if docker compose ps n8n | grep -q "Up"; then
        N8N_VERSION=$(docker compose exec -T n8n n8n --version 2>/dev/null || echo "N/A")
        echo -e "  n8n: ${GREEN}$N8N_VERSION${NC}"
    fi
    
    # Caddy
    if docker compose ps caddy | grep -q "Up"; then
        CADDY_VERSION=$(docker compose exec -T caddy caddy version 2>/dev/null || echo "N/A")
        echo -e "  Caddy: ${GREEN}$CADDY_VERSION${NC}"
    fi
    
    # Flowise
    if docker compose ps flowise | grep -q "Up"; then
        echo -e "  Flowise: ${GREEN}$(docker compose images flowise --format "{{.Tag}}")${NC}"
    fi
    
    echo ""
}

# Fonction de mise √† jour avec choix
update_choice() {
    echo -e "${YELLOW}üéØ Type de mise √† jour:${NC}"
    echo "1) üöÄ Rapide (n8n seulement)"
    echo "2) üì¶ Compl√®te (tous les services)"
    echo "3) üîß Avec recreation des conteneurs"
    echo "4) ‚ùå Annuler"
    echo ""
    read -p "Votre choix [1-4]: " UPDATE_TYPE
    
    case $UPDATE_TYPE in
        1) update_n8n_only ;;
        2) update_all ;;
        3) update_recreate ;;
        4) echo -e "${YELLOW}‚èπÔ∏è Mise √† jour annul√©e${NC}"; exit 0 ;;
        *) echo -e "${RED}‚ùå Choix invalide${NC}"; exit 1 ;;
    esac
}

# Mise √† jour n8n seulement
update_n8n_only() {
    echo -e "${BLUE}üöÄ Mise √† jour rapide de n8n...${NC}"
    
    docker compose pull n8n
    docker compose up -d n8n
    
    echo -e "${GREEN}‚úÖ n8n mis √† jour !${NC}"
}

# Mise √† jour de tous les services
update_all() {
    echo -e "${BLUE}üì¶ Mise √† jour compl√®te...${NC}"
    
    # T√©l√©charger les nouvelles images
    echo -e "${YELLOW}‚¨áÔ∏è T√©l√©chargement des nouvelles images...${NC}"
    docker compose pull
    
    # Red√©marrer les services
    echo -e "${YELLOW}üîÑ Red√©marrage des services...${NC}"
    docker compose up -d
    
    echo -e "${GREEN}‚úÖ Tous les services mis √† jour !${NC}"
}

# Mise √† jour avec recr√©ation
update_recreate() {
    echo -e "${BLUE}üîß Mise √† jour avec recr√©ation...${NC}"
    echo -e "${RED}‚ö†Ô∏è Cette op√©ration va recr√©er tous les conteneurs${NC}"
    
    read -p "Continuer? [y/N]: " CONFIRM
    if [[ ! "$CONFIRM" =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}‚èπÔ∏è Op√©ration annul√©e${NC}"
        exit 0
    fi
    
    # T√©l√©charger les nouvelles images
    echo -e "${YELLOW}‚¨áÔ∏è T√©l√©chargement des nouvelles images...${NC}"
    docker compose pull
    
    # Arr√™ter les services
    echo -e "${YELLOW}‚èπÔ∏è Arr√™t des services...${NC}"
    docker compose down
    
    # Red√©marrer avec recr√©ation
    echo -e "${YELLOW}üöÄ Recr√©ation des conteneurs...${NC}"
    docker compose up -d --force-recreate
    
    echo -e "${GREEN}‚úÖ Mise √† jour compl√®te termin√©e !${NC}"
}

# Fonction de nettoyage
cleanup_docker() {
    echo -e "${YELLOW}üßπ Nettoyage Docker...${NC}"
    
    # Images inutilis√©es
    docker image prune -f
    
    # Volumes anonymes
    docker volume prune -f
    
    # R√©seaux inutilis√©s
    docker network prune -f
    
    echo -e "${GREEN}‚úÖ Nettoyage termin√©${NC}"
}

# V√©rifier l'√©tat apr√®s mise √† jour
check_status() {
    echo -e "${BLUE}üîç V√©rification de l'√©tat des services...${NC}"
    
    sleep 5  # Attendre que les services d√©marrent
    
    echo -e "${YELLOW}üìä √âtat des conteneurs:${NC}"
    docker compose ps
    
    echo ""
    echo -e "${YELLOW}üåê Test de connectivit√©:${NC}"
    
    # Tester n8n
    if command -v curl &> /dev/null; then
        DOMAIN=$(grep DOMAIN_NAME $PROJECT_ROOT/.env | cut -d '=' -f2)
        SUBDOMAIN=$(grep SUBDOMAIN $PROJECT_ROOT/.env | cut -d '=' -f2)
        
        if [[ -n "$DOMAIN" && -n "$SUBDOMAIN" ]]; then
            N8N_URL="https://$SUBDOMAIN.$DOMAIN"
            if curl -s -o /dev/null -w "%{http_code}" "$N8N_URL" | grep -q "200\|401\|302"; then
                echo -e "  n8n: ${GREEN}‚úÖ Accessible${NC}"
            else
                echo -e "  n8n: ${RED}‚ùå Non accessible${NC}"
            fi
        fi
    fi
    
    echo ""
}

# Sauvegarde pr√©ventive
backup_before_update() {
    echo -e "${YELLOW}üíæ Sauvegarde pr√©ventive recommand√©e${NC}"
    read -p "Faire une sauvegarde avant la mise √† jour? [Y/n]: " DO_BACKUP
    
    if [[ ! "$DO_BACKUP" =~ ^[Nn]$ ]]; then
        if [[ -f "backup.sh" ]]; then
            echo -e "${BLUE}üì¶ Cr√©ation de la sauvegarde...${NC}"
            ./backup.sh
        else
            echo -e "${RED}‚ùå Script backup.sh non trouv√©${NC}"
            echo -e "${YELLOW}üíæ Sauvegarde manuelle recommand√©e${NC}"
            read -p "Continuer sans sauvegarde? [y/N]: " CONTINUE
            if [[ ! "$CONTINUE" =~ ^[Yy]$ ]]; then
                exit 0
            fi
        fi
    fi
}

# Programme principal
main() {
    # V√©rifier que nous sommes dans le bon dossier
    if [[ ! -f "$PROJECT_ROOT/docker-compose.yml" ]]; then
        echo -e "${RED}‚ùå Fichier docker-compose.yml non trouv√©${NC}"
        echo -e "${YELLOW}üí° Ex√©cutez ce script depuis le dossier scripts de n8n-docker-caddy${NC}"
        exit 1
    fi
    
    # Se d√©placer dans le r√©pertoire racine pour les commandes Docker
    cd $PROJECT_ROOT
    
    # Afficher les versions actuelles
    show_current_versions
    
    # Proposer une sauvegarde
    backup_before_update
    
    # Choix du type de mise √† jour
    update_choice
    
    # V√©rifier l'√©tat
    check_status
    
    # Proposer le nettoyage
    echo ""
    read -p "Faire le nettoyage Docker? [y/N]: " DO_CLEANUP
    if [[ "$DO_CLEANUP" =~ ^[Yy]$ ]]; then
        cleanup_docker
    fi
    
    # Afficher les nouvelles versions
    echo ""
    echo -e "${BLUE}üéâ Mise √† jour termin√©e !${NC}"
    show_current_versions
    
    # Conseils post-mise √† jour
    echo -e "${YELLOW}üí° Conseils post-mise √† jour:${NC}"
    echo "  ‚Ä¢ V√©rifiez que vos workflows n8n fonctionnent"
    echo "  ‚Ä¢ Testez l'acc√®s √† Flowise"
    echo "  ‚Ä¢ Surveillez les logs: docker compose logs -f"
    
    if [[ -f "$PROJECT_ROOT/credentials.txt" ]]; then
        echo "  ‚Ä¢ Vos identifiants sont dans: credentials.txt"
    fi
    
    # Retourner au r√©pertoire racine pour faciliter les prochaines √©tapes
    cd $PROJECT_ROOT
}

# V√©rifier si lanc√© avec des arguments
if [[ $# -gt 0 ]]; then
    case $1 in
        --n8n-only) update_n8n_only ;;
        --all) update_all ;;
        --recreate) update_recreate ;;
        --cleanup) cleanup_docker ;;
        --help|help)
            echo "Usage: $0 [option]"
            echo "Options:"
            echo "  --n8n-only    Mettre √† jour n8n seulement"
            echo "  --all         Mettre √† jour tous les services"
            echo "  --recreate    Recr√©er tous les conteneurs"
            echo "  --cleanup     Nettoyer Docker seulement"
            echo "  --help        Afficher cette aide"
            exit 0
            ;;
        *) echo -e "${RED}‚ùå Option inconnue: $1${NC}"; exit 1 ;;
    esac
else
    main
fi